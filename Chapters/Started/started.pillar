!! Publishing your first project

In this chapter we explain how you can publish your project on github using Iceberg.
We do not explain concepts like commit, push/pull, merging, or cloning.
We thank Peter Uhnak for his first blog on publishing Pharo code on Github.

As git is distributed versioning system, you need a local clone of the repository. 
In general you commit your changes to your local clone, and from there you push to remote repositories like  github or gitlab, or that of your company.
Iceberg will do all these operations and more for you.

!!! For the impatient

If you do not want to read anything, here is the executive summary.

- Create a project on github or any git-based platform.
- Configure Iceberg to use custom ssh keys
- Open Iceberg.
- Add a project (chose clone from ...).
- Optionally, in the cloned repository, create a directory named ==src== on your file system using either the FileList or your command line.
- Open your project and add your packages (It is always good to add a baseline).
- Commit your project.
- Push it to your remote repository.

You are done. Now we can explain in more detail.

!!! Iceberg setup 

To be able to be commit to your git project, you will need to set up a valid set of credentials in your system.
In case you use SSH (the default way), you will need to make sure those keys are available to your github account and also that the shell adds them for smoother communication with the server. 

In case they are not (and you will notice as soon as you try to clone a project or commit a change into one), you can add them following these steps (on Windows, if you want a nice command line environment, install **http://mingw.org/wiki/msys*): 

!!!! Generating a key pair

To do this execute the command:
[[[
ssh-keygen -t rsa
]]]

It will generate a private and a public key (on unix-based installation in the directory ==.ssh==). 
You should copy your ==id_rsa.pub== key to your github account.
Keep the keys in a safe place.

On Windows, you can follow instructions on how to generate your keys as explained at *http://guides.beanstalkapp.com/version-control/git-on-windows.html#installing-ssh-keys*.

!!!! Adding the key to your ssh

In linux, execute in your shell:
[[[
ssh-add ~/.ssh/id_rsa
]]]

In OSX, execute in your shell:
[[[
ssh-add -K ~/.ssh/id_rsa
]]]

For both OSX and linux you can add such lines in your ==.bash_profile== (or the one corresponding to your shell installation such as ==.zshrc==) so they are automatically executed on each new shell session.

!!!! Tell Pharo to use your keys

You need to go to settings browser, search for "Use custom SSH keys" and complete your data there as shown in Figure *@UseCustom*).

+Use Custom SSH keys settings.>file://figures/useCustom.png|width=75|label=UseCustom+

Alternatively, you can execute in your image playground or add to your Pharo system preference file the following expressions:

[[[
IceCredentialsProvider useCustomSsh: true.
IceCredentialsProvider sshCredentials
	publicKey: 'path\to\ssh\id_rsa.pub';
	privateKey: 'path\to\ssh\id_rsa'
]]]

@@note ""Pro Tip:"" this can be used too in case you have a non default key file, you just need to replace ==id_rsa== with your file name.


!!! Create a new project on github

Figure *@onGitHub* shows the creation of a project on Github. You should be able to do it without more information. 

+Create a new project.>file://figures/onGitHub.png|width=75|label=onGitHub+


!!! Add a new project to Iceberg


The first step is then to add a project to Iceberg.
- Press the '+' button available on the right of the Iceberg main window.
- Then select from which source you want to get your the project. Since you did not clone your project yet, choose the github option. 

Figure *@Cloning* shows that we are cloning the repository we just created. 
We specify the owner, the project, and the physical location where the local clone and git working copy will be on your disk.

+Cloning new project.>file://figures/Cloning.png|width=75|label=Cloning+

Once done, Iceberg has added your project to its list of managed projects and cloned an empty repository to your disk as shown by Figure *@FirstTimeCloned* shows the status of the project

We explain it now:
- MyCoolProjectWithPharo has a star and is green because the system thinks that some changes were not committed. It may happen because of packages in your image being in a strange state. You should not worry about that for now.
- The Status of the project is 'No Project Found' and this is more important. This is normal since the project is empty, Iceberg cannot find its metadata. We will fix this soon.

+Just after cloning an empty project.>file://figures/FirstTimeCloned.png|width=75|label=FirstTimeCloned+

!!! [Optional but strongly suggested] Adding a src directory

Some developers like to group all their code in a directory ==src== and this is a nice practice. 
We strongly suggest to follow it.
You can go to your filesystem and create a repository. 
And you can also use the Pharo FileList Browser to do it as shown in Figure *@WithSrc*.

+Adding an src folder to .>file://figures/WithSrc.png|width=75|label=WithSrc+


!!! Repair to the rescue

Iceberg is a smart tool that tries to help you fixing the problems you may encounter while working with Git.
As a general principle each time you get a status text with a red color (such as No Project Found, or Detached Working Copy), you 
should ask Iceberg to fix it using the ""Repair"" item.

Iceberg cannot solve all the situations automatically but it will propose and explain you possible repair actions. 
The actions are ranked from the most probable to the least one.
Each action will explain you the situation and the consequence of the action.
It is always a good idea to read them.

Figure *@RepairFirst* shows the action Create project meta-data and its explanation.

+Create project meta-data action and explanation.>file://figures/RepairFirst.png|width=75|label=RepairFirst+

!!! Create project meta-data

When you chose to create the project meta-data, Iceberg shows you the file of your project as well as the repository encoding as shown in Figure *@Tonel*.
Tonel is the favorite encoding for Pharo project.
Tonel has been designed to be Windows and file system friendly. 
So change it only if you know why. 

+Showing where the metadata will be saved and the format encodings.>file://figures/Tonel.png|width=75|label=Tonel+

When continuing, Iceberg shows you the files that you are actually committing as shown in Figure *@PublishingMetaData*

+Details of meta data commit.>file://figures/PublishingMetaData.png|width=75|label=PublishingMetaData+

Once you have committed the meta-data, Iceberg shows you that your project is repaired but not loaded as shown in Figure *@SavedMetaData*. This is normal since up until now we did not add package to our project. 
But your local repository is ready.

+The package is clean, meta-data are saved, but it is not loaded.>file://figures/SavedMetaData.png|width=75|label=SavedMetaData+

!!! Adding and commiting your package
Once your project contains Iceberg meta-data, Iceberg will be able to manage it easily. 
Double click on your project and add your package by pressing the + (Add Package) button as shown by Figure *@WithAPackage*.

+Adding a package to your project.>file://figures/WithAPackage.png|width=75|label=WithAPackage+

Again Iceberg shows that your package contains changes that are not committed using the green color and the * in front of the package name.

Now you are left with two actions:
- Commit the changes to your local repository using the Commit button. Iceberg will reflect this change by removing the * and the changing the color. 
You can commit several times. 
- Publishing your changes from your local directory to your remote repository using the Push button. 

When you push your changes, Iceberg will show you all the commits that you already did and it will push all the changes
that are present to your remote repository as shown in Figure *@Push*. The figure shows the commits we did to add a baseline
and this is what we will do now. 
Indeed what is left to do is to define a baseline to make sure that you can easily load your project in another image.


+Publishing your committed changes.>file://figures/push.png|width=75|label=Push+




!!! Defining a BaselineOf

A BaselineOf is a description of the project architecture.
You will express the dependencies between packages and other projects so that all the dependent projects are loaded without
the user to have to understand and bother about them.
A baseline is expressed as a subclass of ==BaselineOf== and packaged in a package named =='BaselineOfXXX'==.

So if you have no dependencies, you can have something like this.

[[[
BaselineOf subclass: #BaselineOfMyCoolProjectWithPharo
	...
	package: 'BaselineOfMyCoolProjectWithPharo'
]]]

[[[
BaselineOfMyCoolProjectWithPharo >> baseline: spec
	<baseline>
	spec
		for: #common
		do: [ spec package: 'BMyCoolProjectWithPharo'.
			spec group: 'default' with: #('FileDialog') ]
]]]

Once you have defined the baseline, you should add it to your project as shown in Figure *@WithBaseline*.
And you should commit it and push your changes to your remote repository.

+With a Baseline.>file://figures/WithBaseline.png|width=75|label=WithBaseline+

The online documentation available at: *https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Baselines.md*.


!!! Loading from an existing repository

If you already have a repository, and you just want to load it into Pharo, you can do it in two ways.
The first one is as we did above. You can select a package and manually load it.

The second one makes use of Metacello. This will however only work if you have already created a BaselineOf.
With a baseline, you can just do

[[[
Metacello new
	baseline: 'MyCoolFirstProjectWithPharo';
	repository: 'github://Ducasse/MyCoolProjectWithPharo/src';
	load
]]]

Do not forget the ==/src== at the end if you have created a subdirectory for the code!

!!! [Optional] Add a nice .gitignore file

Iceberg manages automatically such files.
[[[
# For Pharo 70 and up
# http://www.pharo.org
# Since Pharo 70 all the community is moving to git.

# image, changes and sources
*.changes
*.sources
*.image

# Pharo Debug log file and launcher metadata
PharoDebug.log
pharo.version
meta-inf.ston

# Since Pharo 70, all local cache files for Monticello package cache, playground, epicea... are under the pharo-local
/pharo-local

# Metacello-github cache
/github-cache
github-*.zip
]]]



!! Empowering your projects

Now that you can save like a breeze your code on github you can take advantage of services
to automate actions using Travis for example.

!!! Adding Travis integration

By adding two simple files, you can get the tests of your project being run after each commit with travis.
You need to enable the travis of your github repository. Check on your travis account. 

And you should add the two following files: ==.travis.yml== and ==.smalltalk.ston== on the top level of your 
repository. 

==.travis.yml==

[[[
language: smalltalk
sudo: false
os:
  - linux
smalltalk:
  - Pharo-7.0
]]]

==.smalltalk.ston==
[[[
SmalltalkCISpec {
  #loading : [
    SCIMetacelloLoadSpec {
      #baseline : 'MyCoolProjectWithPharo',
      #directory : src',
      #platforms : [ #pharo ]
    }
  ]
}
]]]

If you’ve done everything right Travis will pick up the changes and will start testing and building it… and you’re done, congratulations!

!!! On windows
If you want to make sure that your code runs on windows you should use the Appveyor service and add the appveyor.yml file.

[[[
environment:
  CYG_ROOT: C:\cygwin
  CYG_BASH: C:\cygwin\bin\bash
  CYG_CACHE: C:\cygwin\var\cache\setup
  CYG_EXE: C:\cygwin\setup-x86.exe
  CYG_MIRROR: http://cygwin.mirror.constant.com
  SCI_RUN: /cygdrive/c/smalltalkCI-master/run.sh
  matrix:
    - SMALLTALK: Pharo-6.1
    - SMALLTALK: Pharo-7.0

platform:
  - x86

install:
  - '%CYG_EXE% -dgnqNO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P unzip'
  - ps: Start-FileDownload "https://github.com/hpi-swa/smalltalkCI/archive/master.zip" "C:\smalltalkCI.zip"
  - 7z x C:\smalltalkCI.zip -oC:\ -y > NULL

build: false

test_script:
  - '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; $SCI_RUN"'
]]]


!!! Adding badges

With CI happily running, you can add a badge to your readme that will show the current status of your project.
Here is the one of the Containers-Stack project where we enabled the coveralls.io service to get the coverage of test computed and displayed too.

[[[
# Containers-Stack
A dead stupid stack implementation, but one fully working :)

[![Build Status](https://travis-ci.com/Ducasse/Containers-Stack.svg?branch=master)]
(https://travis-ci.com/Ducasse/Containers-Stack)
[![Coverage Status](https://coveralls.io/repos/github//Ducasse/Containers-Stack/badge.svg?branch=master)]
(https://coveralls.io/github//Ducasse/Containers-Stack?branch=master)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)]()
[![Pharo version](https://img.shields.io/badge/Pharo-7.0-%23aac9ff.svg)]
(https://pharo.org/download)
[![Pharo version](https://img.shields.io/badge/Pharo-8.0-%23aac9ff.svg)]
(https://pharo.org/download)

## Installation
The following script installs Containers-Stack in Pharo.

```smalltalk
Metacello new
  baseline: 'ContainersStack';
  repository: 'github://Ducasse/Containers-Stack/src';
  load.
```
]]]


To obtain the necessary link, click on the badge in your Travis project overview and select one of the options. You can insert the markdown code directly to your README.md.

!! Understanding the architecture

!!! Glimpse at the architecture

As git is distributed versioning, you will need a local clone of the repository.
You commit to your local clone, and from there you push to github or other places.

Figure *@architecture* shows the architecture of the system. 

- You have your code in the Pharo image.
- Pharo is acting as a working copy (it contains the contents of the git local repository).
- Iceberg manages the publication of your code into the git working copy and the git local repository.
- Iceberg manages the publication of your code to remote repositories.
- Iceberg manages the resynchronisation of your image with the git local repository, git remote repositories and the git working copy.

+Create a new project.>file://figures/architecture.png|width=75|label=architecture+

